%import common.WS
%import common.CNAME
%import common.NUMBER
%import common.INT
%import common.ESCAPED_STRING

COMMENT: "//" /[^\n]*/
MULTILINE_COMMENT: "/*" /(.|\n)*?/ "*/"

%ignore COMMENT
%ignore MULTILINE_COMMENT

LITERAL: NUMBER
IDENTIFIER: CNAME

start: program

program: (func_def | statement)*

print_stmt: "print" "(" expr ")" ";"

return_stmt: "return" expr ";"

?declaration_stmt: "let" (IDENTIFIER)? IDENTIFIER ("=" expr)? ";"

func_def: "fn" type_specifier IDENTIFIER "(" (param ("," param)*)? ")" block

type_specifier: "int" | "string" | "float" | "void" | "bool"

param: type_specifier IDENTIFIER

?statement: declaration_stmt
          | print_stmt
          | return_stmt
          | expr_stmt

?expr_stmt: expr ";"

?expr: expr "||" term  -> or
     | expr "&&" term  -> and
     | expr "==" term  -> eq
     | expr "!=" term  -> neq
     | expr "<" term   -> lt
     | expr "<=" term  -> le
     | expr ">" term   -> gt
     | expr ">=" term  -> ge
     | term

?term: term "+" factor -> add
     | term "-" factor -> sub
     | factor

?factor: factor "*" unary -> mul
       | factor "/" unary -> div
       | factor "%" unary -> mod
       | unary

?unary: "-" unary      -> neg
      | "!" unary      -> not
      | primary

?primary: LITERAL
        | ESCAPED_STRING         # Added this
        | IDENTIFIER
        | "(" expr ")"

block: "{" statement* "}"

%ignore WS
