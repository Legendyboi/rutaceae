%import common.WS
%import common.CNAME
%import common.NUMBER
%import common.INT
%import common.ESCAPED_STRING

COMMENT: "//" /[^\n]*/
MULTILINE_COMMENT: "/*" /(.|\n)*?/ "*/"

%ignore COMMENT
%ignore MULTILINE_COMMENT

TRUE.2: "true"
FALSE.2: "false"

FLOAT_LITERAL: /[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?/

LITERAL: INT
IDENTIFIER: CNAME

start: program

program: (func_def | statement)*

print_stmt: "print" "(" expr ("," expr)* ")" ";"

return_stmt: "return" expr ";"

let_stmt: "let" IDENTIFIER (":" type_specifier)? ("=" expr)? ";"
const_stmt: "const" IDENTIFIER (":" type_specifier)? "=" expr ";"

?declaration_stmt: let_stmt | const_stmt

func_def: "fn" type_specifier IDENTIFIER "(" (param ("," param)*)? ")" block

type_specifier: "int" | "string" | "float" | "void" | "bool"

param: type_specifier IDENTIFIER

assignment_stmt: IDENTIFIER "=" expr ";"

if_stmt: "if" "(" expr ")" block ("else" block)?

while_stmt: "while" "(" expr ")" block

for_update: IDENTIFIER "=" expr

for_init: declaration_stmt
        | assignment_stmt
        | ";"

for_stmt: "for" "(" for_init expr ";" for_update ")" block

break_stmt: "break" ";"
continue_stmt: "continue" ";"

increment_stmt: IDENTIFIER "++" ";"
decrement_stmt: IDENTIFIER "--" ";"

PLUS_ASSIGN: "+="
MINUS_ASSIGN: "-="
MULT_ASSIGN: "*="
DIV_ASSIGN: "/="
MOD_ASSIGN: "%="

compound_assign_stmt: IDENTIFIER (PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN | MOD_ASSIGN) expr ";"

?statement: declaration_stmt
          | assignment_stmt
          | compound_assign_stmt
          | print_stmt
          | return_stmt
          | if_stmt
          | while_stmt
          | for_stmt
          | break_stmt
          | continue_stmt
          | increment_stmt
          | decrement_stmt
          | expr_stmt

?expr_stmt: expr ";"

?expr: expr "||" term  -> or_
     | expr "&&" term  -> and_
     | expr "==" term  -> eq
     | expr "!=" term  -> neq
     | expr "<" term   -> lt
     | expr "<=" term  -> le
     | expr ">" term   -> gt
     | expr ">=" term  -> ge
     | term

?term: term "+" factor -> add
     | term "-" factor -> sub
     | factor

?factor: factor "*" unary -> mul
       | factor "/" unary -> div
       | factor "%" unary -> mod
       | unary

?unary: "-" unary      -> neg
      | "!" unary      -> not
      | primary

?primary: LITERAL
        | FLOAT_LITERAL
        | ESCAPED_STRING
        | IDENTIFIER
        | TRUE
        | FALSE
        | "(" expr ")"

block: "{" statement* "}"

%ignore WS
